// === Serve the HTML UI ===
function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('Customer Job Entry Form')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// === SUBMIT NEW ENTRY ===
function submitFormData(formData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const main = ss.getSheetByName('Customer Data and Job Sheet');
    const work = ss.getSheetByName('Work Committed');
    if (!main || !work) throw new Error("Sheets missing!");

    // Find next Job ID
    const lastRow = main.getLastRow();
    const nextId = lastRow > 1 ? Number(main.getRange(lastRow, 1).getValue()) + 1 : 1;

    // Format date
    const formattedDate = Utilities.formatDate(new Date(formData.date), Session.getScriptTimeZone(), "dd/MM/yyyy");

    // Prepare payment splits JSON (new column after amount billed)
    const paymentSplitsJson = JSON.stringify(formData.paymentSplits || []);

    // Append main customer/job row (11 columns + payment details JSON)
    main.appendRow([
      nextId,
      formData.customerName,
      formData.phone,
      formData.carNumber,
      formData.carModel,
      formData.carBoard || 'Own',
      formData.place,
      formData.source,
      formattedDate,
      formData.amountBilled,
      paymentSplitsJson   // <- New: JSON string of splits
    ]);

    // Write all work rows
    (formData.workRows || []).forEach(item => {
      work.appendRow([
        nextId,
        item.workType || '',
        item.detail || '',
        item.sparePart || '',
        item.rate || '',
        item.vendor || '',
        formattedDate
      ]);
    });

    generateEstimateText_ForJobId(nextId);
    return { success: true, message: `Job ${nextId} submitted`, jobId: nextId };
  } catch (e) {
    return { success: false, message: e.message };
  }
}

// === UPDATE EXISTING ENTRY ===
function updateFormData(formData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const main = ss.getSheetByName('Customer Data and Job Sheet');
    const work = ss.getSheetByName('Work Committed');
    if (!main || !work) throw new Error("Sheets missing!");

    const jobId = Number(formData.jobId);
    const data = main.getDataRange().getValues();
    let rowToUpdate = null;
    for (let i = 1; i < data.length; i++) {
      if (Number(data[i][0]) === jobId) {
        rowToUpdate = i + 1;
        break;
      }
    }
    if (!rowToUpdate) throw new Error("Job ID not found");

    const formattedDate = Utilities.formatDate(new Date(formData.date), Session.getScriptTimeZone(), "dd/MM/yyyy");
    const paymentSplitsJson = JSON.stringify(formData.paymentSplits || []);

    // Update main row (now with JSON)
    main.getRange(rowToUpdate, 2, 1, 10).setValues([[
      formData.customerName,
      formData.phone,
      formData.carNumber,
      formData.carModel,
      formData.carBoard || 'Own',
      formData.place,
      formData.source,
      formattedDate,
      formData.amountBilled,
      paymentSplitsJson   // <- Here!
    ]]);

    // Remove and re-add work rows for this job
    const workData = work.getDataRange().getValues();
    const header = workData[0];
    const keepRows = workData.filter((row, index) => index === 0 || Number(row[0]) !== jobId);

    if (keepRows.length < workData.length) {
      work.clearContents();
      work.getRange(1, 1, keepRows.length, keepRows[0].length).setValues(keepRows);
    }

    const newWorkRows = (formData.workRows || []).map(item => [
      jobId,
      item.workType || '',
      item.detail || '',
      item.sparePart || '',
      item.rate || '',
      item.vendor || '',
      formattedDate
    ]);
    if (newWorkRows.length > 0) {
      work.getRange(work.getLastRow() + 1, 1, newWorkRows.length, newWorkRows[0].length).setValues(newWorkRows);
    }

    generateEstimateText_ForJobId(jobId);
    return { success: true, message: `Job ${jobId} updated` };
  } catch (e) {
    return { success: false, message: e.message };
  }
}

// === FETCH ENTRY ===
function fetchCustomerData(searchCriteria) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const main = ss.getSheetByName('Customer Data and Job Sheet');
  const work = ss.getSheetByName('Work Committed');
  const timezone = Session.getScriptTimeZone();
  if (!main || !work) throw new Error("Required sheets not found");

  // Normalize search inputs
  const normCarNum = (searchCriteria.carNumber || '').replace(/\s+/g, '').toUpperCase();
  const normPhone = (searchCriteria.phone || '').replace(/\D/g, '');
  const normName = (searchCriteria.customerName || '').trim().toUpperCase();

  // Find matching record
  const mainData = main.getDataRange().getValues().slice(1);
  const foundRecord = mainData.find(row => {
    const rowCarNum = String(row[3] || '').replace(/\s+/g, '').toUpperCase();
    const rowPhone = String(row[2] || '').replace(/\D/g, '');
    const rowName = String(row[1] || '').trim().toUpperCase();
    return (
      (normCarNum && rowCarNum.includes(normCarNum)) ||
      (normPhone && rowPhone === normPhone) ||
      (normName && rowName.includes(normName))
    );
  });

  if (!foundRecord) return null;
  const jobId = foundRecord[0];
  const carModel = foundRecord[4] ? String(foundRecord[4]).trim() : "";
  const workData = work.getDataRange().getValues().slice(1);
  const workRows = workData
    .filter(row => Number(row[0]) === jobId)
    .map(row => {
      let part = row[3] || '';
      if (carModel && part.startsWith(carModel + ' ')) {
        part = part.slice(carModel.length + 1).replace(/^\s+/, '');
      }
      return {
        workType: row[1],
        detail: row[2],
        sparePart: part,
        rate: row[4],
        vendor: row[5],
        date: row[6] ? Utilities.formatDate(new Date(row[6]), timezone, "dd/MM/yyyy") : ''
      };
    });

  // --- New: Parse payment splits JSON
  let paymentSplits = [];
  try {
    paymentSplits = foundRecord[10] ? JSON.parse(foundRecord[10]) : [];
  } catch (err) {
    paymentSplits = [];
  }

  return {
    jobId: jobId,
    customerName: foundRecord[1],
    phone: foundRecord[2],
    carNumber: foundRecord[3],
    carModel: foundRecord[4],
    carBoard: foundRecord[5] || 'Own',
    place: foundRecord[6],
    source: foundRecord[7],
    date: foundRecord[8] ? Utilities.formatDate(new Date(foundRecord[8]), timezone, "dd/MM/yyyy") : '',
    amountBilled: foundRecord[9],
    paymentSplits: paymentSplits,
    workRows: workRows
  };
}


// === GENERATE ESTIMATE TEXT ===
function generateEstimateText_ForJobId(jobId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const mainSheet = ss.getSheetByName('Customer Data and Job Sheet');
    const workSheet = ss.getSheetByName('Work Committed');
    const estimateSheet = ss.getSheetByName('Estimate Text') || ss.insertSheet('Estimate Text');

    if (estimateSheet.getLastRow() === 0) {
      estimateSheet.appendRow(['Job ID', 'Estimate Text']);
    }

    const mainData = mainSheet.getDataRange().getValues();
    const mainRow = mainData.find(row => Number(row[0]) === Number(jobId));
    if (!mainRow) return '';

    const customer = mainRow[1] || '';
    const phone = mainRow[2] || '';
    const carNumber = mainRow[3] || '';
    const carName = mainRow[4] || '';
    const date = mainRow[8] ? Utilities.formatDate(new Date(mainRow[8]), Session.getScriptTimeZone(), "dd MMMM yyyy") : '';

    const workData = workSheet.getDataRange().getValues();
    const workRows = workData.filter(row => Number(row[0]) === Number(jobId));

    let total = 0;
    const serviceLines = workRows.map((row, idx) => {
      let workType = row[1] || '';
      if (workType.trim().toLowerCase() === 'shock absorber') {
        workType = 'Shock Absorber Reconditioning';
      }
      const detail = row[2] || '';
      const part = row[3] || '';
      const amt = row[4] ? Number(row[4]) : 0;
      total += amt;
      const labelParts = [workType, detail, part].filter(Boolean);
      return `${idx + 1}. ${labelParts.join(' | ') || '-'} | ₹${amt}`;
    });

    const estimateText = [
      "Muthu Suspension Works",
      "Sale Estimate / Bill",
      "",
      `Job ID: ${jobId}`,
      `Customer: ${customer}`,
      `Phone: ${phone}`,
      `Car Name: ${carName}`,
      `Car Number: ${carNumber}`,
      `Date: ${date}`,
      "-----------------------------",
      "Services:",
      ...serviceLines,
      "-----------------------------",
      `Total: ₹${total}`,
      "-----------------------------",
      "Thank you for choosing MSW!"
    ].join("\n");

    const estimateData = estimateSheet.getDataRange().getValues();
    let estimateRow = estimateData.findIndex(row => Number(row[0]) === Number(jobId)) + 1;

    if (estimateRow > 0) {
      estimateSheet.getRange(estimateRow, 2).setValue(estimateText);
    } else {
      estimateSheet.appendRow([jobId, estimateText]);
    }

    return estimateText;
  } catch (e) {
    console.error('Error generating estimate:', e);
    return '';
  }
}


